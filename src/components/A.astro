---
import type { HTMLAttributes } from 'astro/types'
import type { Paths } from 'type-fest'
import { url } from '~/urls'

interface Props extends HTMLAttributes<'a'> {
  href?: (string & Record<never, never>) | keyof Urls
}

type Keys = Paths<typeof url, { leavesOnly: true }>
type ToUrl<K> = K extends `${infer A}.${infer B}` ? `${A}/${ToUrl<B>}` : K
export type Urls = {
  [K in Keys as `//${ToUrl<K>}`]: string
}

const { props } = Astro
if (props.href?.startsWith('//')) {
  const path = props.href.slice(2).split('/')
  props.href = path.reduce((obj, key) => obj[key as never], url) as any
}
if (props.href?.startsWith('https://') || props.href?.startsWith('http://')) {
  props.target = '_blank'
}
---

<a {...props}><slot /></a>
